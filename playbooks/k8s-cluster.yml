---
# Kubernetes Cluster Playbook

# Install python required for Ansible
- include: bootstrap-ansible.yml

# Make sure Kubespray submodule is correct
- hosts: 127.0.0.1
  connection: local
  gather_facts: false
  tasks:
    - name: make sure kubespray is at the correct version
      command: git submodule update --init
  vars:
    ansible_become: no

# Set up passwordless sudo and SSH keys if needed
- include: bootstrap.yml
  vars:
    ansible_user: "{{ lookup('env','USER') }}"

# Work around issues when sudo needs a password on local machine
- hosts: 127.0.0.1
  connection: local
  gather_facts: false
  vars:
    ansible_become: no
  tasks:
    - name: check for kube inventory
      stat:
        path: "../k8s-config"
      register: kube_inventory
    - name: add become to group_vars config for all
      lineinfile:
        path: "../k8s-config/group_vars/all/all.yml"
        line: "ansible_become: yes"
        create: yes
    - name: create host_vars directory for localhost
      file:
        path: "../k8s-config/host_vars"
        state: directory
      when: kube_inventory.stat.exists
    - name: create host_vars config for localhost
      lineinfile:
        path: "../k8s-config/host_vars/localhost"
        line: "ansible_become: no"
        create: yes
    - name: create host_vars config for localhost
      lineinfile:
        path: "../k8s-config/host_vars/127.0.0.1"
        line: "ansible_become: no"
        create: yes

# Install Kubernetes
- include: ../kubespray/cluster.yml
  vars:
    ansible_user: "{{ lookup('env','USER') }}"
    kubectl_localhost: true
    kubeconfig_localhost: true
    helm_enabled: true
    tiller_node_selectors: "node-role.kubernetes.io/master=''"
    docker_version: 18.06
    docker_dns_servers_strict: no
    docker_storage_options: -s overlay2
 
# Manage Kubernetes cluster access config file
- hosts: 127.0.0.1
  connection: local
  gather_facts: false
  vars:
    ansible_become: no
  tasks:
    - name: create kube config directory for current user
      file:
        path: "{{ lookup('env','HOME') + '/.kube/' }}"
        state: directory
    - name: check for kube config file
      stat:
        path: "../k8s-config/artifacts/admin.conf"
      register: kubeconf
    - name: copy kube config file for current user
      copy:
        src: "../k8s-config/artifacts/admin.conf"
        dest: "{{ lookup('env','HOME') + '/.kube/config' }}"
        backup: yes
      when: kubeconf.stat.exists

# Install driver and container runtime on GPU servers
- hosts: all
  become: true
  vars:
    ansible_user: "{{ lookup('env','USER') }}"
    docker_daemon_json:
      default-runtime: nvidia
      runtimes:
        nvidia:
          path: /usr/bin/nvidia-container-runtime
          runtimeArgs: []
    nvidia_docker2_package_version: "2.0.3+docker18.06.1-1"
    nvidia_container_runtime_package_version: "2.0.0+docker18.06.1-1"
  tasks:
    - name: Check for GPUs
      shell: lspci | grep -i nvidia
      register: has_gpu
      ignore_errors: true
    - include_role:
        name: nvidia-driver
      when: has_gpu.rc == 0
    - include_role:
        name: nvidia-docker
      when: has_gpu.rc == 0

# Install k8s GPU device plugin
- include: k8s-gpu-plugin.yml
  vars:
    ansible_user: "{{ lookup('env','USER') }}"

# Manage kubectl binary
- hosts: 127.0.0.1
  connection: local
  gather_facts: false
  vars:
    ansible_become: no
  tasks:
    - name: check for kubectl
      stat:
        path: "../k8s-config/artifacts/kubectl"
      register: kubectl_local
    - name: modify kubectl permissions
      file:
        path: "../k8s-config/artifacts/kubectl"
        mode: '0755'
      when: kubectl_local.stat.exists
    - name: copy kubectl 
      copy:
        src: "../k8s-config/artifacts/kubectl"
        dest: "/usr/local/bin/kubectl"
      when: kubectl_local.stat.exists
      become: true
      ignore_errors: yes
      register: kubectl_copied
    - name: check for copied kubectl
      stat:
        path: "/usr/local/bin/kubectl"
      register: kubectl_system
    - name: modify kubectl permissions
      file:
        path: "/usr/local/bin/kubectl"
        owner: root
        group: root
        mode: '0755'
      when: kubectl_system.stat.exists
    - name: manually move kubectl binary
      debug:
        msg: "Unable to move kubectl, run: sudo cp ./k8s-config/artifacts/kubectl /usr/local/bin"
      when: kubectl_copied is failed
